# -*- coding: utf-8 -*-
"""QuantLib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UJRFm3JRFb4-D96hEZNvg7iQnc7A8naS
"""

pip install QuantLib-Python matplotlib numpy

import QuantLib as ql
import matplotlib.pyplot as plt
import numpy as np

def create_rate_helpers(market_data):
    rate_helpers = []
    for tenor, rate in market_data:
        if tenor.units() == ql.Months:
            helper = ql.DepositRateHelper(ql.QuoteHandle(ql.SimpleQuote(rate)),
                                          tenor, 3, ql.TARGET(), ql.ModifiedFollowing,
                                          False, ql.Actual360())
        else:
            helper = ql.SwapRateHelper(ql.QuoteHandle(ql.SimpleQuote(rate)),
                                       tenor, ql.TARGET(),
                                       ql.Annual, ql.Unadjusted,
                                       ql.Thirty360(ql.Thirty360.USA), ql.Euribor3M())
        rate_helpers.append(helper)
    return rate_helpers

# Market data
market_rates = [(ql.Period(6, ql.Months), 0.005),
                (ql.Period(1, ql.Years), 0.007),
                (ql.Period(5, ql.Years), 0.015),
                (ql.Period(10, ql.Years), 0.02),
                (ql.Period(30, ql.Years), 0.025)]

rate_helpers = create_rate_helpers(market_rates)
curve_date = ql.Date.todaysDate()
dates = [curve_date + ql.Period(i, ql.Months) for i in range(0, 360)]

# Curve Building Methods
methods = {
    "Piecewise Linear Zero": ql.PiecewiseLinearZero,
    "Piecewise Log Cubic Discount": ql.PiecewiseLogCubicDiscount,
    "Piecewise Cubic Zero": ql.PiecewiseCubicZero
}

plt.figure(figsize=(15, 10))

# Construct and plot each curve
for i, (label, curve_method) in enumerate(methods.items(), 1):
    yield_curve = curve_method(curve_date, rate_helpers, ql.Actual360())
    rates = [yield_curve.zeroRate(d, ql.Actual360(), ql.Continuous).rate() for d in dates]

    # Subplot for each method
    plt.subplot(2, 2, i)
    plt.plot([d.to_date() for d in dates], rates, label=label)
    plt.title(label)
    plt.xlabel("Date")
    plt.ylabel("Zero Rate")
    plt.grid(True)
    plt.legend()

    # Calculate and print forward rate after one year
    one_year = ql.Period(1, ql.Years)
    forward_rate = yield_curve.forwardRate(curve_date + one_year, curve_date + one_year + ql.Period(1, ql.Days), ql.Actual360(), ql.Continuous).rate()
    print(f"{label} - Forward rate after one year: {forward_rate:.4f}")

plt.tight_layout()
plt.show()